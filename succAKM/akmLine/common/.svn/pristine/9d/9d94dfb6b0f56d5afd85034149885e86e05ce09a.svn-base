#coding=utf-8
# ycat			2017-09-05	  create
# 自动生成序列化的功能 
import sys,os
import codecs
import pickle
import uuid
import collections
import qtawesome as qta	
from PyQt5.QtCore import Qt,QEvent,QPoint
from PyQt5.QtGui import QPalette,QColor
from PyQt5.QtWidgets import (QApplication, QGridLayout, QHBoxLayout,QLayout, QLineEdit,QVBoxLayout,QFormLayout,QLabel,QComboBox,
		QSizePolicy,QTableView, QToolButton, QWidget,QTextEdit,QDialog,QPushButton,QHeaderView,QAbstractItemView)
from PyQt5.QtGui import (QStandardItemModel,QStandardItem)
		
import setup
if __name__ == '__main__':
	setup.setCurPath(__file__)
import ui.inputBox
import ui.numberBox
import ui.checkbox
import qtutility
import utility

DEFAULT_CODEC = "utf-8"		
DEFAULT_FONT_SIZE = 12
BTN_MIN_HEIGTH = 30
		 
def scramble(s):
	if len(s):
		return utility.md5("ycat"+s) 
	else:
		return s

class pwdCtrl(ui.inputBox.inputBox):	 
	def __init__(self):
		super(pwdCtrl, self).__init__(handPad=False) 
		self.setEchoMode(QLineEdit.Password)
	
	#QMouseEvent
	def mousePressEvent(self,event):
		self.setText("")
		super(pwdCtrl, self).mousePressEvent(event) 
			
class metaData: 
	def __init__(self,objType,title,iconName=""):
		self.objType = objType
		self.fields = collections.OrderedDict()
		self.title = title
		self.iconName = iconName
		self.primaryKeys = set()
	
	def setPrimary(self,name,*param):
		self.primaryKeys.clear()
		self.primaryKeys.add(name)
		assert name in self.fields
		for p in param:
			assert p in self.fields
			self.primaryKeys.add(p)
	
	def _getPrimary(self,obj):
		r = ""
		for k in self.primaryKeys:
			v = self.fields[k].value(obj)
			r += str(v) + "@@"
		return r
	 
	def addText(self,name,fieldName,ctrl=ui.inputBox.inputBox,readonly=False):
		assert fieldName not in self.fields
		m = metaItem(name,fieldName,ctrl,"str")
		m.readonly = readonly
		self.fields[fieldName] = m

	def addPwd(self,name,fieldName,ctrl=pwdCtrl,scrambleFunc = scramble):
		assert fieldName not in self.fields
		m = metaItem(name,fieldName,ctrl,"pwd")
		m.scrambleFunc = scrambleFunc
		self.fields[fieldName] = m
		
	def addInt(self,name,fieldName,ctrl=ui.numberBox.numberBox,min = 0, max = sys.maxsize):
		assert fieldName not in self.fields
		m = metaItem(name,fieldName,ctrl,"int")
		m.min = min
		m.max = max
		self.fields[fieldName] = m
		
	def addFloat(self,name,fieldName,precision=2,ctrl=ui.numberBox.numberBox):
		assert fieldName not in self.fields
		m = metaItem(name,fieldName,ctrl,"float")
		m.precision = precision
		self.fields[fieldName] = m
		
	#values为[(1,"xxx1"),(2,"xxx2")]的列表 
	def addSelect(self,name,fieldName,items,ctrl=QComboBox):
		assert fieldName not in self.fields
		m = metaItem(name,fieldName,ctrl,"select") 
		m.items = items
		self.fields[fieldName] = m
 		
	def addNewLine(self):
		self.fields[uuid.uuid1()] = "newLine"
	
	def addSpace(self):
		self.fields[uuid.uuid1()] = "space"
		
	def __len__(self):
		return len(self.fields)
		
	def __iter__(self):
		for item in self.fields:
			yield self.fields[item]
	
	def createLayout(self,layoutClass=QHBoxLayout):
		ctrls = {}
		ll = layoutClass()
		ll.setSpacing(20) 
		l = QFormLayout()
		l.setFormAlignment(Qt.AlignHCenter | Qt.AlignTop)
		l.setSpacing(10) 
		ll.addLayout(l)
		for f in self:
			if isinstance(f,str):
				if f == "newLine":
					l = QFormLayout()
					l.setFormAlignment(Qt.AlignHCenter | Qt.AlignTop)
					l.setSpacing(10)  
					ll.addLayout(l)
				elif f == "space":
					q = QWidget()
					q.setFixedSize(20,20)
					l.addRow(q)  
				continue
			c = f.addCtrl(l)
			if isinstance(c,tuple):
				c[0].meta = f
			else:
				c.meta = f
			ctrls[f.fieldName] = c  
		return (ll,ctrls)
	
#默认的数据管理器  
class manager:
	def __init__(self,objType,meta):
		self.data = collections.OrderedDict()
		self.isModified = False
		self.objType = objType
		self.meta = meta
	
	def __str__(self):
		return utility.str_obj(self.data)
	
	def save(self,filename): 
		with open(filename,"wb") as f:
			pickle.dump(self.data,f)
		self.isModified = False
		
	def load(self,filename):
		#if not os.path.exists(filename):
		with open(filename,"rb") as f:
			self.data = pickle.load(f)
		self.isModified = False
	
	def new(self):
		return self.objType()
	
	def add(self,obj):
		assert isinstance(obj,self.objType)
		id = ""
		if hasattr(obj,"id"):
			id = getattr(obj,"id")
		if not id:
			id = uuid.uuid1()
			obj.id = id
		self.data[id] = obj
		self.isModified = True
		
	def delete(self,id):
		if id in self.data:
			del self.data[id]
		self.isModified = True	
		
	def update(self,id,obj):
		assert isinstance(obj,self.objType)
		obj.id = id
		self.data[id] = obj
		self.isModified = True 
		
	def isExist(self,id):
		return id in self.data
		
	def __len__(self):
		return len(self.data)
		
	def __iter__(self):
		for d in self.data:
			yield self.data[d]
			
	def checkRepeat(self,obj):
		if len(self.meta.primaryKeys) == 0:
			return
		s = []
		for d in self:
			assert d.id != ""
			if d.id == obj.id:
				continue
			s.append(self.meta._getPrimary(d))
		if self.meta._getPrimary(obj) in s:
			return self.meta.title + "已经存在"
		return None
		
class editDlg(QDialog): 
	def __init__(self,obj,meta,manager=None):
		super(editDlg, self).__init__() 
		self.meta = meta
		self.manager = manager
		self.ctrls = {}
		self.setWindowFlags(Qt.WindowCloseButtonHint) 		
		if meta.iconName:
			self.setWindowIcon( qta.icon(meta.iconName,color='white'))
		self.setFixedWidth(300)		
		self.setFixedHeight(max(len(meta)*100,150))		
		
		ll = QVBoxLayout()
		ll.addLayout(self.createCtrls())
		ll.addLayout(self.createBtns())
		self.setLayout(ll)
		self.setObj(obj)
		self.currentID = ""
		self.setWindowTitle("新建"+meta.title) 
		
	def createCtrls(self):
		l,self.ctrls = self.meta.createLayout()
		return l
		
	def createButtonLayout(self):
		l2 = QHBoxLayout()
		l2.addStretch(1) 
		l2.setSpacing(20)
		return l2
		
	def createBtns(self):
		l2 = self.createButtonLayout()
		b = QPushButton(qta.icon("fa.check",scale_factor=1.5,color="green"),"确定")
		b.setMinimumHeight(40)
		b.clicked.connect(self.accept)
		b.setFixedWidth(80)
		self.okBtn = b
		l2.addWidget(b) 
		
		b = QPushButton(qta.icon("fa.remove",scale_factor=1.5,color="red"),"取消")
		b.setMinimumHeight(40)
		b.clicked.connect(self.reject)
		b.setFixedWidth(80)
		l2.addWidget(b)
		return l2 
		
	def accept(self):
		for item in self.meta:
			if isinstance(item,str):
				continue
			msg = item.Check(self.ctrls[item.fieldName])
			if msg:
				qtutility.showWaring(msg)
				return 
			if self.manager:
				msg = self.manager.checkRepeat(self.getObj())
				if msg:
					qtutility.showWaring(msg)
					return 
		super(editDlg, self).accept()
		
	def setObj(self,obj): 
		assert isinstance(obj,self.meta.objType)
		if hasattr(obj,"id"):
			self.currentID = obj.id
		for key in self.ctrls:
			cc = self.ctrls[key]
			if isinstance(cc,tuple):
				v = cc[0].meta.value(obj)
				for c in cc:
					qtutility.setValue(c,v) 
			else:
				v = cc.meta.value(obj)
				qtutility.setValue(cc,v) 
		self.setWindowTitle("编辑"+self.meta.title)	 
		return obj
		
	def getObj(self): 
		return self._get(self.meta.objType())
		
	def getDict(self):
		return self._get({})
		
	def _get(self,obj):
		utility.set_attr(obj,"id",self.currentID)
		for key in self.ctrls:
			cc = self.ctrls[key]
			if isinstance(cc,tuple):
				v = cc[0].meta.value(cc[0])
				#v = qtutility.getValue(self.ctrls[key][0])
			else:
				v = cc.meta.value(cc)
				#v = qtutility.getValue(self.ctrls[key])
			utility.set_attr(obj,key,v)
		return obj
		
class managerDlg(QDialog): 
	def __init__(self,manager,filename):
		super(managerDlg, self).__init__() 
		
		self.manager = manager
		self.filename = filename
		
		bb = self.createButtons()
		layout = QVBoxLayout()
		layout.addWidget(self.createTable()) 	
		layout.addLayout(bb)
		self.setLayout(layout)
		
		self.setWindowFlags(Qt.WindowCloseButtonHint) 		
		self.setFixedSize(500,500)
		self.setWindowTitle(manager.meta.title+"管理") 
		self.finished.connect(self.closeEvent)
		
	def createButtonLayout(self):
		h = QHBoxLayout()
		h.setSpacing(20) 
		return h 
		
	def createButtons(self): 
		buttonLayout = self.createButtonLayout()
		
		button = QPushButton(qta.icon("fa.file-o",scale_factor=1.2,color="green"),"新建")
		button.setMinimumHeight(BTN_MIN_HEIGTH) 
		qtutility.setFontSize(button,DEFAULT_FONT_SIZE)
		button.clicked.connect(self.clickNew)
		buttonLayout.addWidget(button)
		
		button = QPushButton(qta.icon("fa.edit",scale_factor=1.2,color="blue"),"编辑")
		button.setMinimumHeight(BTN_MIN_HEIGTH) 
		button.clicked.connect(self.clickEdit)
		qtutility.setFontSize(button,DEFAULT_FONT_SIZE)
		buttonLayout.addWidget(button)
		self.editBtn = button
		
		button = QPushButton(qta.icon("fa.trash-o",scale_factor=1.2,color="red"),"删除")
		button.setMinimumHeight(BTN_MIN_HEIGTH) 
		button.clicked.connect(self.clickDel)
		qtutility.setFontSize(button,DEFAULT_FONT_SIZE)
		buttonLayout.addWidget(button) 
		self.delBtn = button
		
		button = QPushButton(qta.icon("fa.close",scale_factor=1.2,color="black"),"关闭")
		button.setMinimumHeight(BTN_MIN_HEIGTH)
		qtutility.setFontSize(button,DEFAULT_FONT_SIZE)
		button.clicked.connect(self.reject)
		buttonLayout.addWidget(button)
		self.editBtn.setEnabled(False)
		self.delBtn.setEnabled(False) 
		return buttonLayout
		
	def createTable(self):
		self.table = QTableView()	
		self.reload()
		self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
		self.table.setSelectionBehavior(QAbstractItemView.SelectRows) 
		self.table.setSelectionMode(QAbstractItemView.SingleSelection) 
		self.table.setColumnWidth(1,150)
		 
		self.table.verticalHeader().hide()     
		self.table.clicked.connect(self.itemSelectChange)
		self.table.doubleClicked.connect(self.clickEdit)
		return self.table
		
	def reload(self):
		self.model = QStandardItemModel()
		self.model.clear()
		i = 0
		for item in self.manager.meta: 
			if isinstance(item,str):
				continue
			self.model.setHorizontalHeaderItem(i, QStandardItem(item.name)) 
			i+=1
		for i,info in enumerate(self.manager): 
			h = 0
			for m in self.manager.meta:
				if isinstance(m,str):
					continue
				item = QStandardItem(m.valueStr(info))
				if h == 0:
					item.setData(info)
				self.model.setItem(i, h, item)
				h+=1
		self.table.setModel(self.model)
		self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)		
  
	def data(self):
		i = self.table.currentIndex()
		if i is None or i.row() == -1: 
			return None 
		return self.model.item(i.row(),0).data()
	
	def clickEdit(self):
		obj = self.data()
		if obj is None:
			return 
		dlg = editDlg(self.manager.new(),self.manager.meta,manager=self.manager)
		dlg.setObj(obj)
		if dlg.exec_() == dlg.Accepted:
			self.manager.update(obj.id,dlg.getObj())
			self.manager.save(self.filename)
			self.reload()
	
	def clickNew(self): 
		dlg = editDlg(self.manager.new(),self.manager.meta,manager=self.manager)
		if dlg.exec_() == dlg.Accepted:
			self.manager.add(dlg.getObj())
			self.manager.save(self.filename)
			self.reload()
			
	def clickDel(self):
		obj = self.data()
		if obj is None:
			return
		self.manager.delete(obj.id)
		self.manager.save(self.filename)
		self.reload()
	
	def itemSelectChange(self):
		if self.data() is None:
			self.editBtn.setEnabled(False)
			self.delBtn.setEnabled(False) 
		else:
			self.editBtn.setEnabled(True)
			self.delBtn.setEnabled(True) 
	#QCloseEvent 
	def closeEvent(self,event): 
		self.table.setModel(None)

class metaItem:
	def __init__(self,name,fieldName,ctrl,valueType):
		self.name = name
		self.fieldName = fieldName
		self.ctrlCls = ctrl
		self.valueType = valueType 
		self.readonly = False
	
	def addCtrl(self,formLayout):
		c1 = self.getCtrl()
		formLayout.addRow(self.getLabel(self.name),c1)
		if self.valueType == "pwd": #and newDlg:
			c2 = self.getCtrl()
			formLayout.addRow(self.getLabel(self.name.strip()+"确认"),c2)
			return (c1,c2)
		else:
			return c1
	
	def getLabel(self,text):
		if not text.endswith(":"):
			text = text +":"
		c = QLabel(text)
		font = c.font()
		font.setPointSize(DEFAULT_FONT_SIZE)
		c.setFont(font)
		return c
	
	def getCtrl(self):
		c = self.ctrlCls()
		font = c.font()
		font.setPointSize(DEFAULT_FONT_SIZE)
		c.setFont(font) 
		if self.valueType == "int":
			c.min = self.min
			c.max = self.max
		elif self.valueType == "select":
			for i in self.items:
				c.addItem(i[1],i[0])
		elif self.valueType == "str":
			c.setReadOnly(self.readonly)
		return c
	 
	def value(self,obj):
		if isinstance(obj,QWidget):
			v = qtutility.getValue(obj)
		else:
			v = utility.get_attr(obj,self.fieldName)
		if self.valueType == "int":
			return int(v)
		elif self.valueType == "float":
			return float(v)
		elif self.valueType == "pwd":
			if len(v) < 15:
				#说明是原始密码 
				return self.scrambleFunc(v)
			else:
				return v
		else:
			return v
			
	def valueStr(self,obj):
		v = self.value(obj)
		if self.valueType == "float": 
			return ("%0."+str(self.precision)+"f")%v
		elif self.valueType == "pwd":
			return "●"*len(v)
		elif self.valueType == "select":
			for i in self.items:
				if i[0] == v:
					return str(i[1])
		return str(v)
	
	def setValue(self,obj,v):
		utility.set_attr(obj,self.fieldName,v)
		
	def Check(self,ctrls):
		if self.valueType == "pwd":
			if isinstance(ctrls,tuple):
				if qtutility.getValue(ctrls[0]) != qtutility.getValue(ctrls[1]):
					return self.name+"不同相"
		if self.valueType == "str" or self.valueType == "pwd":
			if isinstance(ctrls,tuple):
				v = qtutility.getValue(ctrls[0])
			else:
				v = qtutility.getValue(ctrls)
			if v == "":
				return self.name+"不能为空"
		return None		
	
if __name__ == '__main__': 
	class testData:
		def __init__(self):
			self.aaa = 1000
			self.bbb = "hello world"
			self.ccc = "11"
			self.ddd = 0.0
			self.eee = 1
		
		def meta(self):
			m = metaData(testData,"测试对话框")
			m.addInt("字段1","aaa")
			m.addText("字段2","bbb")
			m.addNewLine()
			m.addPwd("字段3","ccc")
			m.addFloat("字段4","ddd")
			m.addSelect("字段5","eee",[(0,"item0"),(1,"item1"),(2,"item2"),(4,"item4")])
			m.setPrimary("aaa")
			return m
			
	app = QApplication(sys.argv)
	data = testData()
	m = manager(testData,data.meta())
	for i in range(10):
		t = testData()
		t.aaa = 1000+i
		m.add(t)
	m.add(testData())
	d = managerDlg(m,"test/testmanger.txt")  
	sys.exit(d.exec_())
	
	
	
	
	
	
	